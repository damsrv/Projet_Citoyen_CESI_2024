name: CICD
run-name: ${{ github.actor }} CICD
on: 
  push:
    branches:
      - feat/cicd-finale

env:
  NEXT_PUBLIC_PUSHER_APP_KEY: ${{ vars.NEXT_PUBLIC_PUSHER_APP_KEY }}
  PUSHER_APP_ID: ${{ vars.PUSHER_APP_ID }}
  PUSHER_APP_SECRET: ${{ vars.PUSHER_APP_SECRET }}

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build
        
      # - uses: actions/cache/save@v3
      #   with:
      #     path:  |
      #       ~/.cache/Cypress
      #       node_modules
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

  # audit:
  #   name: Audit Project
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Run npm audit
  #       run: npm audit --audit-level=high
    

  # jest-test:
  #   name: Launch JEST Tests
  #   runs-on: ubuntu-latest
  #   #needs: audit
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Compose
  #       run: docker-compose up --build -d

  #     - name: Set up environment variables
  #       run: |
  #         echo "POSTGRES_PRISMA_URL=postgres://postgres:secretpassword@localhost:5432/projet-citoyen" >> $GITHUB_ENV

  #     - name: Install NPM dependencies
  #       run: npm install

  #     - name: Install Prisma globally
  #       run: npm install -g prisma

  #     - name: Wait for PostgreSQL to be ready
  #       run: |
  #         sudo apt-get install -y postgresql-client
  #         until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done

  #     - name: Prisma generate
  #       run: npx prisma generate

  #     - name: Apply Prisma migrations
  #       run: npx prisma migrate deploy

  #     - name: seed database
  #       run: npm run seed

  #     - name: Verify data seeding
  #       env:
  #         PGPASSWORD: secretpassword
  #       run: |
  #         psql -h localhost -p 5432 -U postgres -d projet-citoyen -c "SELECT * FROM \"Offer\";"
    
  #     - name: Run unit test
  #       run: npm run test

  e2e-test:
    name: Launch e2e Tests
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        browser: [chrome]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: docker-compose up --build -d

      - name: Set up environment variables
        run: |
          echo "POSTGRES_PRISMA_URL=postgres://postgres:secretpassword@localhost:5432/projet-citoyen" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=mySecret" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV

      - name: Install NPM dependencies
        run: npm install

      - name: Install Prisma globally
        run: npm install -g prisma

      - name: Wait for PostgreSQL to be ready
        run: |
          sudo apt-get install -y postgresql-client
          until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done

      - name: Prisma generate
        run: npx prisma generate

      - name: Apply Prisma migrations
        run: npx prisma migrate deploy

      - name: seed database
        run: npm run seed

      - name: Verify data seeding
        env:
          PGPASSWORD: secretpassword
        run: |
          psql -h localhost -p 5432 -U postgres -d projet-citoyen -c "SELECT * FROM \"User\";"

      - uses: actions/cache/restore@v3
        with:
          path:  |
            ~/.cache/Cypress
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      # - name: Cypress run
      #   uses: cypress-io/github-action@v6
      #   with:
      #     install: npm install
      #     build: npm run build
      #     start: npm run start

      - name: test
        run: npm run e2e:headless
      

      

  # unit-test:
  #   name: Run unit test
  #   runs-on: ubuntu-latest
  #   needs: db
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: run unit test 
  #       run: npm run test 

    # functionalTest:
    #   name: Run functional test
    #   runs-on: ubuntu-latest
    #   needs: db
    #   - name: run functional test 
    #     run: npm run test 

    # e2eTest:
    #   name: Run e2e test
    #   runs-on: ubuntu-latest
    #   needs: db
    #   - name: run functional test
    #     run: e2e:headless





  # build-project:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Compose
  #       run: docker-compose up --build -d

  #     - name: Set up environment variables
  #       run: |
  #         echo "POSTGRES_PRISMA_URL=postgres://postgres:secretpassword@localhost:5432/projet-citoyen" >> $GITHUB_ENV

  #     - name: Install NPM dependencies
  #       run: npm install

  #     - name: Install Prisma globally
  #       run: npm install -g prisma

  #     - name: Wait for PostgreSQL to be ready
  #       run: |
  #         sudo apt-get install -y postgresql-client
  #         until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done

  #     - name: Prisma generate
  #       run: npx prisma generate

  #     - name: Apply Prisma migrations
  #       run: npx prisma migrate deploy

  #     - name: seed database
  #       run: npm run seed

  #     - name: Verify data seeding
  #       env:
  #         PGPASSWORD: secretpassword
  #       run: |
  #         psql -h localhost -p 5432 -U postgres -d projet-citoyen -c "SELECT * FROM \"Offer\";"

  #     - name: run test !
  #       run: npm run test 


  #     # Uncomment the next lines if you want to run tests with Jest
  #     # - name: Run tests
  #     #   run: npm run test