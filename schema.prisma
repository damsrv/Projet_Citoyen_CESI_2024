generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  url = env("POSTGRES_PRISMA_URL")

  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Category {

  id Int @id @default(autoincrement())

  name String? @db.VarChar

  categoryTypeId Int?

  categoryType CategoryType? @relation(fields: [categoryTypeId], references: [id], onDelete: Cascade)

  offers Offer[]

  skillCategories SkillCategory[]
}

model CategoryType {

  id Int @id @default(autoincrement())

  name String? @db.VarChar

  categories Category[]
}

model Evaluation {
        
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now()) 

  studentId Int

  mentorId Int

  value Int 

  comment String?

  mentor User @relation("mentorEvaluations", fields: [mentorId], references: [id], onDelete: Cascade)

  student User @relation("studentEvaluations", fields: [studentId], references: [id], onDelete: Cascade)
}

model Message {

  id Int @id @default(autoincrement())

  sentAt DateTime @default(now()) 

  roomId Int

  senderId Int

  content String

  status Int 

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model OfferStudent {

  studentId Int 

  date DateTime @default(now()) 

  offerId Int

  message String?

  status Int

  offer Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)

  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([offerId, studentId])
}


model Offer {

  id Int @id @default(autoincrement())

  createdAt DateTime @default(now()) 

  content String

  location String? @db.VarChar

  status Int

  mentorId Int

  title String @db.VarChar

  categoryId Int

  offerStudents OfferStudent[]

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  mentor User @relation(fields: [mentorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  savedOffers SavedOffer[]
}

model Report {

  id Int @id @default(autoincrement())

  reporterId Int

  targetId Int

  createdAt DateTime @default(now())  

  message String

  reason String @db.VarChar 

  reporter User @relation("reporterReports", fields: [reporterId], references: [id], onDelete: Cascade)

  target User @relation("targetReports", fields: [targetId], references: [id], onDelete: Cascade)
}

model RequestMentor {

  mentorId Int

  date DateTime @default(now()) 

  requestId Int

  message String

  status Int

  mentor User @relation(fields: [mentorId], references: [id], onDelete: Cascade)

  request Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@id([mentorId, requestId])
}

model Request {

  id Int @id @default(autoincrement())

  createdAt DateTime @default(now()) 

  content String @db.VarChar

  title String @db.VarChar

  location String? @db.VarChar

  studentId Int

  status Int

  requestMentors RequestMentor[]

  student User? @relation(fields: [studentId], references: [id], onDelete: Cascade)

  savedRequests SavedRequest[]
}

model Role {

  id Int @id @default(autoincrement())

  name String @db.VarChar

  users User[]
}

model Room {

  id Int @id @default(autoincrement())

  createdAt DateTime @default(now()) 

  name String? @db.VarChar

  messages Message[]

  userRooms UserRoom[]
}

model SavedOffer {

  userId Int

  offerId Int

  offer Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, offerId])
}

model SavedRequest {

  userId Int

  requestId Int

  request Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, requestId])
}

model UserRoom {

  userId Int

  roomId Int

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roomId])
}

model User {

  id Int @id @default(autoincrement())

  firstname String @db.VarChar

  lastname String @db.VarChar

  email String @db.VarChar @unique

  password String @db.VarChar

  avatar String? @db.VarChar

  status Int

  description String?

  birthdate DateTime? 

  experiences String?

  roleId Int

  registerAt DateTime @default(now())

  mentorEvaluations Evaluation[] @relation("mentorEvaluations")

  studentEvaluations Evaluation[] @relation("studentEvaluations")

  messages Message[]

  offerStudents OfferStudent[]

  offers Offer[]

  reporterReports Report[] @relation("reporterReports")

  targetReports Report[] @relation("targetReports")

  requestMentors RequestMentor[]

  requests Request[]

  savedOffers SavedOffer[]

  savedRequests SavedRequest[]

  userComTypes UserComType[]

  userRooms UserRoom[]

  userSkills UserSkill[]

  role Role @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ComType {

  id Int @id

  name String @db.VarChar

  userComTypes UserComType[]
}

model SkillCategory {

  skillId Int

  categoryId Int

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([categoryId, skillId])
}

model Skill {

  id Int @id @default(autoincrement())

  name String @db.VarChar

  skillCategories SkillCategory[]

  userSkills UserSkill[]
}

model UserComType {

  userId Int

  comTypeId Int

  comType ComType @relation(fields: [comTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, comTypeId])
}

model UserSkill {

  skillId Int

  userId Int

  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user  User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, skillId])
}
